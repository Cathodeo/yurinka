#include <stdio.h>
#include <string.h>
#include <parse.h>


BITMAP *buffer;

void text_roll(FILE *file, int line_numbers[6], char (*array1)[64], char (*array2)[16], char (*image_filenames)[64], char (*music_filenames)[64]) {
    char parsebuff[256];  // Temporary buffer to read each line
    int current_line = 1;
    int line_index = 0;
    int array1_index = 0, array2_index = 0;

    // Keywords for special actions
    char next_background[] = "&background";
    char next_music[] = "&music";
    char next_sprite[] = "&sprite";

    // Reset file pointer to the beginning of the file
    rewind(file);

    // Read through the file line by line
    while (fgets(parsebuff, sizeof(parsebuff), file) != NULL) {
        // Check if the current line matches the specified line numbers
        if (current_line == line_numbers[line_index]) {
            // First 3 lines go into array1
            if (line_index < 3) {
                sprintf(array1[array1_index], "%s", parsebuff);
                array1[array1_index][strcspn(array1[array1_index], "\n")] = '\0';  // Remove newline
                array1_index++;
            } else {
                // Check if the line starts with a special character "&"
                if (parsebuff[0] == '&') {
                    parsebuff[strcspn(parsebuff, "\n")] = '\0'; 
                    
                    // Extract the command and the filename/argument
                    char *command = strtok(parsebuff, " ");
                    char *argument = strtok(NULL, " ");

                    // Compare and trigger actions
                    if (strcmp(command, next_background) == 0 && argument) {
                        strcpy(image_filenames[0], argument); // Store the image filename
                        load_blit(image_filenames[0], buffer, 54, 18);  // Load the image
                        blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);
                    } else if (strcmp(command, next_music) == 0 && argument) {
                        strcpy(music_filenames[0], argument); // Store the music filename
                        play_background_music(music_filenames[0]);
                       
                    } else if (strcmp(command, next_sprite) == 0 && argument) {
                        strcpy(image_filenames[1], argument); // Store the sprite filename
                        // Load sprite or perform sprite change here
                    } else {
                        // Handle other cases or ignore
                    }
                } else {
                    // Regular lines go into array2 (lines 4 to 6)
                    sprintf(array2[array2_index], "%s", parsebuff);
                    array2[array2_index][strcspn(array2[array2_index], "\n")] = '\0';  // Remove newline
                    array2_index++;
                }
            }
            line_index++;
            // Stop if all 6 lines are processed
            if (line_index >= 6) {
                break;
            }
        }
        current_line++;
    }

    // Safely terminate any remaining elements in array1 or array2
    while (array1_index < 3) {
        array1[array1_index][0] = '\0';  // Empty string
        array1_index++;
    }
    while (array2_index < 3) {
        array2[array2_index][0] = '\0';  // Empty string
        array2_index++;
    }
}



void next_page(int *array, int size, int index) {
    // Base case: stop when the index reaches the size of the array
    if (index == size) {
        return;
    }

    // Add 6 to the current element
    array[index] += 6;

    // Recursive case: process the next element
    next_page(array, size, index + 1);
}
       ooo
int switch_gameplay(int linenumber, int previous_mode)
{
        // Switches the interaction 
        // (1) from Visual novel (next-next)
        // (2) To point and click (explore objects, retrieve items, move between rooms, wip)
        // (3) To puzzle (unimplemented)
        // (4) Or to battle (unimplemented)
        //Spaghetti code incoming
        if (linenumber == 1 || linenumber == 133)
        return 1;
        if (linenumber == 151)
        return 2;
        else 
        return previous_mode;
}

int choice_picker() 
            {
            if ( (mouse_y > 415 && mouse_y < 439) && (mouse_x > 58 && mouse_x < 227) && (mouse_b & 1))
				return 1;
			if ( (mouse_y > 415 && mouse_y < 439) && (mouse_x > 237 && mouse_x < 406) && (mouse_b & 1))
				return 2;
			if ( (mouse_y > 415 && mouse_y < 439) && (mouse_x > 416 && mouse_x < 585) && (mouse_b & 1))
				return 3;
                 else
                 {return 0;}
                }

void gamemode_vn(FILE* file, BITMAP* buffer, char textlines[3][64],
 char choices[3][16],
 char imagename[64],
 char musicname[64],
 int line_numbers[6],
 7int text_updated, int text_scroll)
{
                int size = sizeof(line_numbers) / sizeof(line_numbers[0]);
                if (key[KEY_ENTER] && text_updated == 0 && text_scroll == 1)

                {
			next_page(line_numbers, size, 0);                  // Update the story
			text_roll(file, line_numbers, textlines, choices, imagename, musicname); // Parse the new text
			text_updated = 1;                                  // Mark the text as updated
			rest(10);                                          // Delay to debounce the keypress
		}

		// Draw the text and choices
		triple_dialog(textlines[0], textlines[1], textlines[2]);
		choice_picker_base(buffer, 3);
		choice_picker_text(choices[0], choices[1], choices[2], 3);

		// Blit the buffer to the screen
		blit(buffer, screen, 0, 0, 0, 0, SCREEN_W, SCREEN_H);

		// Reset text_updated when the key is released
		if (!key[KEY_ENTER]) {
			text_updated = 0;// Allow text update on next key press
		}

}


